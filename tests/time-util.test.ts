// Generated by CodiumAI

import { getCurrentDate, parseTime } from '@/common/utils/time'
import { isValid } from 'date-fns'
import { describe, expect, it } from 'vitest'

describe('getCurrentDate', () => {
   // Returns a Date object with the correct year, month, day, hours, minutes, and seconds when passed a valid TimeObject
   it('should return a Date object with the correct year, month, day, hours, minutes, and seconds when passed a valid TimeObject', () => {
      const timeObject = {
         hours: 12,
         minutes: 30,
         seconds: 45
      }
      const expectedDate = new Date()
      expectedDate.setHours(timeObject.hours)
      expectedDate.setMinutes(timeObject.minutes)
      expectedDate.setSeconds(timeObject.seconds)

      const currentDate = getCurrentDate(timeObject)

      expect(isValid(expectedDate)).toBe(true)
      expect(currentDate.getFullYear()).toBe(expectedDate.getFullYear())
      expect(currentDate.getMonth()).toBe(expectedDate.getMonth())
      expect(currentDate.getDate()).toBe(expectedDate.getDate())
      expect(currentDate.getHours()).toBe(expectedDate.getHours())
      expect(currentDate.getMinutes()).toBe(expectedDate.getMinutes())
      expect(currentDate.getSeconds()).toBe(expectedDate.getSeconds())
   })

   // Throws an error when passed a TimeObject with hours less than 0
   it('should throw an error when passed a TimeObject with hours less than 0', () => {
      const timeObject = {
         hours: -1,
         minutes: 30,
         seconds: 45
      }

      expect(() => {
         getCurrentDate(timeObject)
      }).toThrow('Invalid time')
   })
})

describe('parseTime', () => {
   // Should parse a valid time string and return a TimeObject with hours, minutes, and seconds properties
   it('should parse a valid time string and return a TimeObject with hours, minutes, and seconds properties', () => {
      const timeString = '12:34:56'
      const expectedTimeObject = { hours: 12, minutes: 34, seconds: 56 }

      expect(parseTime(timeString)).toEqual(expectedTimeObject)
   })

   // Should throw an error when the input string is empty
   it('should throw an error when the input string is empty', () => {
      const emptyString = ''

      expect(() => {
         parseTime(emptyString)
      }).toThrow('Invalid time')
   })
})
